{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handelChange","type","onChange","className","Card","props","alt","src","user","id","name","email","CardList","users","map","key","App","state","searchKey","fetch","then","response","json","data","setState","err","console","log","this","filteredUsers","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mUAGaA,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACvB,2BACEC,KAAK,SACLF,YAAaA,EACbG,SAAUF,EACVG,UAAU,aCNDC,G,YAAO,SAACC,GAAD,OAClB,yBAAKF,UAAU,kBACX,yBAAKG,IAAI,OAAOC,IAAG,+BAA0BF,EAAMG,KAAKC,GAArC,4BACrB,4BAAMJ,EAAMG,KAAKE,MACrB,2BAAIL,EAAMG,KAAKG,UCFFC,EAAW,SAACP,GAEvB,OACE,yBAAKF,UAAU,aAGbE,EAAMQ,MAAMC,KAAI,SAACN,GAAD,OACd,kBAAC,EAAD,CAAMO,IAAOP,EAAKC,GAAID,KAAOA,SC4CtBQ,E,kDA/Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXJ,MAAO,GACPK,UAAW,IAJD,E,gEAQO,IAAD,OAClB,IACEC,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEX,MAAOU,OAG3B,MAAOE,GACPC,QAAQC,IAAIF,M,+BAIN,IAAD,SACmBG,KAAKX,MAAxBJ,EADA,EACAA,MAAMK,EADN,EACMA,UACPW,EAAgBhB,EAAMiB,QAAO,SAACtB,GAAD,OAAQA,EAAKE,KAAKqB,cAAcC,SAASd,EAAUa,kBACtF,OACE,yBAAK5B,UAAU,OAEb,kBAAC,EAAD,CAAWJ,YAAY,gBAAgBC,aAAc,SAACiC,GAAD,OAAO,EAAKT,SAAS,CAAEN,UAAWe,EAAEC,OAAOC,WAChG,kBAAC,EAAD,CAAUtB,MAASgB,S,GA7BTO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.86622503.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder , handelChange}) => (\n  <input\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handelChange}\n    className=\"search\"\n  />\n);\n","import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => (\n  <div className=\"card-container\">\n      <img alt=\"user\" src={`https://robohash.org/${props.user.id}?set=set1&size=200x200`}/>\n    <h3 >{props.user.name}</h3>\n<p>{props.user.email}</p>\n  </div>\n);\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\n    // console.log(props.users)\n  return (\n    <div className=\"card-list\">\n        \n      {\n      props.users.map((user) => (\n        <Card key = {user.id} user ={user}/>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { Component } from 'react';\nimport {SearchBox} from './components/search-box/search-box.component'\n\nimport { CardList } from './components/card-list/card-list.component';\n// npm run deploy\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      searchKey :\"\",\n    };\n  }\n  \n  componentDidMount() {\n    try {\n      fetch('https://jsonplaceholder.typicode.com/users/')\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState({ users: data });\n          \n        });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const {users,searchKey} = this.state;\n    const filteredUsers = users.filter((user)=>user.name.toLowerCase().includes(searchKey.toLowerCase()));\n    return (\n      <div className=\"App\">\n        \n        <SearchBox placeholder=\"Search Robots\" handelChange={(e) => this.setState({ searchKey: e.target.value })}/>\n        <CardList users = {filteredUsers}>\n          \n        </CardList>\n        \n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}